# .gitpod.yml â€” TS + Selenium WebDriver + Mocha/Chai + ESLint + Prettier
image: gitpod/workspace-full

# Optional environment flags (used by your tests if you want to read them)
# You can check process.env.HEADLESS in your test runner to toggle headless mode.
# Example usage in code:
#   const headless = process.env.HEADLESS !== "false";
#   options.headless(headless)

tasks:
  - name: Setup & Install
    # Runs once per workspace/prebuild: install deps (fast if package-lock.json exists)
    init: |
      if [ -f package.json ]; then
        npm ci || npm install
      else
        npm init -y
        npm install --save-dev \
          typescript ts-node \
          selenium-webdriver \
          mocha chai @types/mocha @types/chai \
          eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin \
          prettier eslint-config-prettier eslint-plugin-prettier
        # minimal tsconfig if missing
        if [ ! -f tsconfig.json ]; then
          cat > tsconfig.json << 'EOF'
          {
            "compilerOptions": {
              "target": "ES2020",
              "module": "commonjs",
              "strict": true,
              "esModuleInterop": true,
              "moduleResolution": "node",
              "types": ["mocha", "node"],
              "outDir": "dist"
            },
            "include": ["tests/**/*.ts", "src/**/*.ts"]
          }
          EOF
        fi
        # minimal ESLint config if missing
        if [ ! -f .eslintrc.json ]; then
          cat > .eslintrc.json << 'EOF'
          {
            "root": true,
            "env": { "es2021": true, "node": true, "mocha": true },
            "parser": "@typescript-eslint/parser",
            "parserOptions": { "project": null, "sourceType": "module" },
            "plugins": ["@typescript-eslint", "prettier"],
            "extends": [
              "eslint:recommended",
              "plugin:@typescript-eslint/recommended",
              "plugin:prettier/recommended"
            ],
            "rules": {
              "prettier/prettier": "warn",
              "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }]
            }
          }
          EOF
        fi
        # minimal Prettier config if missing
        if [ ! -f .prettierrc.json ]; then
          cat > .prettierrc.json << 'EOF'
          {
            "semi": true,
            "singleQuote": true,
            "trailingComma": "es5",
            "printWidth": 100
          }
          EOF
        fi
        # sample test if none exists yet
        mkdir -p tests
        if [ ! -f tests/sauceDemo.test.ts ]; then
          cat > tests/sauceDemo.test.ts << 'EOF'
          import { Builder, By, until, WebDriver } from 'selenium-webdriver';
          import chrome from 'selenium-webdriver/chrome';
          import { expect } from 'chai';

          describe('SauceDemo Flow', function () {
            this.timeout(60000);
            let driver: WebDriver;

            before(async () => {
              const options = new chrome.Options();
              const headless = process.env.HEADLESS !== 'false';
              if (headless) options.addArguments('--headless=new');
              options.addArguments('--no-sandbox', '--disable-dev-shm-usage');
              driver = await new Builder().forBrowser('chrome').setChromeOptions(options).build();
            });

            after(async () => {
              if (driver) await driver.quit();
            });

            it('logs in successfully', async () => {
              await driver.get('https://www.saucedemo.com/');
              await driver.findElement(By.id('user-name')).sendKeys('standard_user');
              await driver.findElement(By.id('password')).sendKeys('secret_sauce');
              await driver.findElement(By.id('login-button')).click();

              await driver.wait(until.elementLocated(By.className('inventory_list')), 10000);
              const title = await driver.findElement(By.className('title')).getText();
              expect(title).to.equal('Products');
            });

            it('adds first product to cart', async () => {
              const firstAddToCart = await driver.findElement(By.css('.inventory_item .btn_inventory'));
              await firstAddToCart.click();
              const badge = await driver.findElement(By.className('shopping_cart_badge')).getText();
              expect(badge).to.equal('1');
            });
          });
          EOF
        fi
        # add helpful scripts if missing
        npx json -I -f package.json -e '
          this.scripts = Object.assign({}, this.scripts, {
            "test": "mocha -r ts-node/register tests/**/*.ts --timeout 60000",
            "lint": "eslint . --ext .ts",
            "fmt": "prettier --write ."
          })
        '
      fi
    # Runs on every workspace start (after init). We do a quick status + tips.
    command: |
      echo "âœ” Environment ready."
      echo "ðŸ‘‰ Run tests:     npm test"
      echo "ðŸ‘‰ Lint code:     npm run lint"
      echo "ðŸ‘‰ Format code:   npm run fmt"
      echo "ðŸ‘‰ Toggle headless (current: $HEADLESS). To see browser: export HEADLESS=false && npm test"

vscode:
  extensions:
    - dbaeumer.vscode-eslint
    - esbenp.prettier-vscode
    - ritwickdey.liveserver
    - hbenl.vscode-mocha-test-adapter
    - ryanluker.vscode-coverage-gutters
    - ms-vscode.vscode-typescript-next
